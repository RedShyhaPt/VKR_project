---
version: '3'
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.4.2}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

#  airflow-init:
#    <<: *airflow-common
#    command: version
#    environment:
#      <<: *airflow-common-env
#      _AIRFLOW_DB_UPGRADE: 'true'
#      _AIRFLOW_WWW_USER_CREATE: 'true'
#      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
#      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

# ======================================================== mlflow
  mlflow:
    image: mlflow:latest
    container_name: mlflow
    environment:
      - ARTIFACT_ROOT=ftp://mlflow:12345@localhost/data
    ports:
      - "5001:5000"
    volumes:
      - ~/airflow/mlflow:/app
    depends_on:
      - ftpd_server

  ftpd_server:
    image: stilliard/pure-ftpd:latest
    container_name: ftpd_server
    environment:
      FTP_USER_NAME: mlflow
      FTP_USER_PASS: 12345
      FTP_USER_HOME: /home/ftpusers/mlflow
      PUBLICHOST: localhost
    ports:
      - "21:21"
      - "30000-30009:30000-30009"
    volumes:
      - ~/airflow/ftp:/home/ftpusers
# use after deploy: pure-pw passwd mlflow -f /etc/pure-ftpd/passwd/pureftpd.passwd -m
# ======================================================== Grafana
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus/
    container_name: prometheus
    hostname: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    restart: always
    environment:
      TZ: "Europe/Moscow"
    networks:
      default:
        ipv4_address: 172.28.0.20
  
  ubuntu:
    image: ubuntu:20.04
    tty: true
    volumes:
      - ./modelserver:/root/server
    container_name: modelserver
    hostname: modelserver
    ports:
      - 9100:9100
      - 5000:5000
    depends_on:
      - postgresql
    restart: always
    environment:
      TZ: "Europe/Moscow"
    networks:
      default:
        ipv4_address: 172.28.0.21

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - ~/airflow/node:/etc/node-exporter/
    container_name: exporter
    hostname: exporter
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.textfile
      - --collector.textfile.directory=/etc/node-exporter/
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - 9101:9101
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      default:
        ipv4_address: 172.28.0.22
  
  grafana:
    image: grafana/grafana
    user: root
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    container_name: grafana
    hostname: grafana
    restart: always
    environment:
      TZ: "Europe/Moscow"
    networks:
      default:
        ipv4_address: 172.28.0.23

  postgresql:
    image: azat/stock_predicting
    environment:
      POSTGRES_USER: stock
      POSTGRES_PASSWORD: stock
      POSTGRES_DB: stock_predicting
    volumes:
      # copy the sql script to create tables
      - ./create_base.sql:/docker-entrypoint-initdb.d/create_base.sql
      # backups
      - ./data:/var/lib/postgresql/data
    ports:
      - 5438:5432
    restart: always
    environment:
      TZ: "Europe/Moscow"
    networks:
      default:
        ipv4_address: 172.28.0.24
  
  datascience-notebook:
    image: jupyter/scipy-notebook
    container_name: jupyter_notebook
    depends_on:
      - postgresql
    ports: 
      - "8888:8888"
    volumes: 
      - ./notes:/home/jovyan/work
    restart: always
    environment:
      TZ: "Europe/Moscow"
    networks:
      default:
        ipv4_address: 172.28.0.25

networks:
  default:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres-db-volume:
